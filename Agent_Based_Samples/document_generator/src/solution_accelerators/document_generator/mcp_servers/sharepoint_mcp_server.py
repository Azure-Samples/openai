#  Copyright (c) Microsoft Corporation.
#  Licensed under the MIT license.

import os
import sys
from dotenv import load_dotenv

from opentelemetry import trace
from mcp.server.fastmcp import FastMCP

# Add the parent directory to the Python path so we can import from tools
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from agents.sharepoint_agent import SharePointAgent

from azure.monitor.opentelemetry import configure_azure_monitor
from azure.identity.aio import DefaultAzureCredential
from azure.ai.projects.aio import AIProjectClient

from common.utilities.files import load_file
from common.contracts.configuration.orchestrator_config import ResolvedOrchestratorConfig
from common.telemetry.app_logger import AppLogger
from common.telemetry.app_tracer_provider import AppTracerProvider

# Load environment variables
load_dotenv()

# Set up logging and tracing
appinsights_connection_string = os.getenv("APPLICATION_INSIGHTS_CNX_STR")
tracer_provider = AppTracerProvider(appinsights_connection_string)
tracer_provider.set_up()
tracer = trace.get_tracer(__name__)
logger = AppLogger(appinsights_connection_string)

configure_azure_monitor(connection_string=appinsights_connection_string)

# Initialize MCP
mcp_server = FastMCP(
    name="SharePoint MCP Server",
    instructions="Interact with SharePoint using the SharePoint agent and its connected tools to get summaries of relevant documents based on user query.",
)


default_runtime_config = load_file(
    os.path.join(
        os.path.dirname(__file__),
        "..",
        "static",
        "agent_config.yaml",
    ),
    "yaml",
)
resolved_config = ResolvedOrchestratorConfig(**default_runtime_config)
sharepoint_agent_config = resolved_config.get_agent_config("sharepoint_agent")

project_client: AIProjectClient = AIProjectClient(
    endpoint=os.getenv("AZURE_AI_AGENT_ENDPOINT"), credential=DefaultAzureCredential()
)


@mcp_server.tool(
    "get_documents_summary",
    description="Get summary of documents from SharePoint site based on search query provided by user.",
)
async def get_documents_summary(search_query: str) -> str:
    """
    Get summary of documents from SharePoint site based on search query provided by user.

    Args:
        search_query (str): Search query to filter documents

    Returns:
        Summary of documents retrieved from SharePoint generated by the SharePoint agent.
    """
    logger.info("Retrieving documents summary from SharePoint site...")
    with tracer.start_as_current_span("Invoking MCP SharePoint Tool"):
        try:
            sharepoint_agent: SharePointAgent = await SharePointAgent.get_instance(logger=logger)
            await sharepoint_agent.initialize(
                sharepoint_connection_name=os.getenv("SHAREPOINT_CONNECTION_NAME"),
                configuration=sharepoint_agent_config,
                project_client=project_client,
            )
            logger.info(f"SharePoint agent initialized successfully")

            # Create thread for run
            thread = await project_client.agents.threads.create()

            # Invoke the SharePoint agent with the search query
            summary = await sharepoint_agent.invoke_with_runtime_config(
                messages=search_query,
                thread=thread,
                runtime_config=sharepoint_agent_config,
                project_client=project_client,
            )
            return summary

        except Exception as e:
            logger.error(f"Error retrieving documents summary: {e}")
            raise e


if __name__ == "__main__":
    # Start the MCP server
    logger.info("Starting SharePoint MCP Server...")
    mcp_server.run()
