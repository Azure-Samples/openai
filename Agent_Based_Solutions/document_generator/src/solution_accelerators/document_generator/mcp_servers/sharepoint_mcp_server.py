#  Copyright (c) Microsoft Corporation.
#  Licensed under the MIT license.

import os
import sys
from dotenv import load_dotenv

from opentelemetry import trace
from mcp.server.fastmcp import FastMCP

# Add the parent directory to the Python path so we can import from tools
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from agents.sharepoint_agent import SharePointAgent
from azure.monitor.opentelemetry import configure_azure_monitor

from common.telemetry.app_logger import AppLogger
from common.telemetry.app_tracer_provider import AppTracerProvider

# Load environment variables
load_dotenv()

# Set up logging and tracing
appinsights_connection_string = os.getenv("APPLICATION_INSIGHTS_CONNECTION_STRING")
tracer_provider = AppTracerProvider(appinsights_connection_string)
tracer_provider.set_up()
tracer = trace.get_tracer(__name__)
logger = AppLogger(appinsights_connection_string)

configure_azure_monitor(connection_string=appinsights_connection_string)

# Initialize MCP
mcp_server = FastMCP(
    name="SharePoint MCP Server",
    instructions="Interact with SharePoint using the SharePoint agent and its connected tools to get summaries of relevant documents based on user query.",
)

# SharePoint agent will be initialized in each request's event loop
sharepoint_agent = None


@mcp_server.tool(
    "get_documents_summary",
    description="Get summary of documents from SharePoint site based on search query provided by user.",
)
async def get_documents_summary(search_query: str) -> str:
    """
    Get summary of documents from SharePoint site based on search query provided by user.

    Args:
        search_query (str): Search query to filter documents

    Returns:
        Summary of documents retrieved from SharePoint generated by the SharePoint agent.
    """
    global sharepoint_agent

    logger.info("Retrieving documents summary from SharePoint site...")
    with tracer.start_as_current_span("Invoking MCP SharePoint Tool"):
        try:
            # Initialize the SharePoint agent if it doesn't exist yet
            if sharepoint_agent is None:
                sharepoint_agent = await SharePointAgent.initialize(logger=logger, tracer=tracer)
                logger.info(f"SharePoint agent initialized successfully. Agent ID: {sharepoint_agent.agent.id}")

            summary = await sharepoint_agent.invoke_sharepoint_agent(
                agent_id=sharepoint_agent.agent.id, thread_id=sharepoint_agent.thread.id, query=search_query
            )
            return summary

        except Exception as e:
            logger.error(f"Error retrieving documents summary: {e}")
            raise e


if __name__ == "__main__":
    # Start the MCP server
    logger.info("Starting SharePoint MCP Server...")
    mcp_server.run()
